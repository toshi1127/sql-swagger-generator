// tslint:disable
/**
 * TestService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {number}
     * @memberof ModelError
     */
    code?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    message?: string;
}
/**
 * Security principal for validating that a user is authorized to execute certain actions
 * @export
 * @interface Principal
 */
export interface Principal {
    /**
     * 
     * @type {string}
     * @memberof Principal
     */
    userId?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Principal
     */
    permissions?: Array<string>;
}
/**
 * 
 * @export
 * @interface Product1
 */
export interface Product1 {
    /**
     * 
     * @type {number}
     * @memberof Product1
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Product1
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof Product1
     */
    price: number;
}
/**
 * 
 * @export
 * @interface Product2
 */
export interface Product2 {
    /**
     * 
     * @type {number}
     * @memberof Product2
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Product2
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof Product2
     */
    price: number;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a product1.
         * @summary Create product1
         * @param {Product1} resource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProduct1: async (resource: Product1, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'resource' is not null or undefined
            if (resource === null || resource === undefined) {
                throw new RequiredError('resource','Required parameter resource was null or undefined when calling createProduct1.');
            }
            const localVarPath = `/products1`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof resource !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(resource !== undefined ? resource : {}) : (resource || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a product2.
         * @summary Create product2
         * @param {Product2} resource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProduct2: async (resource: Product2, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'resource' is not null or undefined
            if (resource === null || resource === undefined) {
                throw new RequiredError('resource','Required parameter resource was null or undefined when calling createProduct2.');
            }
            const localVarPath = `/products2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof resource !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(resource !== undefined ? resource : {}) : (resource || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes the product1 with the given ID.
         * @summary Delete product1
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProduct1: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteProduct1.');
            }
            const localVarPath = `/products1/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes the product2 with the given ID.
         * @summary Delete product2
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProduct2: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteProduct2.');
            }
            const localVarPath = `/products2/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the product1 with the given ID.
         * @summary Get product1 by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProduct1: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getProduct1.');
            }
            const localVarPath = `/products1/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all product1 resources.
         * @summary Get product1s
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProduct1s: async (limit?: number, offset?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/products1`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the product1 resources with the given IDs.
         * @summary Get product1s by ID
         * @param {Array<number>} [ids] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProduct1sByID: async (ids?: Array<number>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/products1/batch`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ids) {
                localVarQueryParameter['ids'] = ids.join(COLLECTION_FORMATS.csv);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the product2 with the given ID.
         * @summary Get product2 by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProduct2: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getProduct2.');
            }
            const localVarPath = `/products2/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all product2 resources.
         * @summary Get product2s
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProduct2s: async (limit?: number, offset?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/products2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the product2 resources with the given IDs.
         * @summary Get product2s by ID
         * @param {Array<number>} [ids] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProduct2sByID: async (ids?: Array<number>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/products2/batch`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ids) {
                localVarQueryParameter['ids'] = ids.join(COLLECTION_FORMATS.csv);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns 200 if the service is healthy.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheck: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/health-check`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Patches the product1 with the given ID.
         * @summary Patch product1
         * @param {number} id 
         * @param {Array<object>} patch 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchProduct1: async (id: number, patch: Array<object>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling patchProduct1.');
            }
            // verify required parameter 'patch' is not null or undefined
            if (patch === null || patch === undefined) {
                throw new RequiredError('patch','Required parameter patch was null or undefined when calling patchProduct1.');
            }
            const localVarPath = `/products1/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof patch !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(patch !== undefined ? patch : {}) : (patch || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Patches the product2 with the given ID.
         * @summary Patch product2
         * @param {number} id 
         * @param {Array<object>} patch 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchProduct2: async (id: number, patch: Array<object>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling patchProduct2.');
            }
            // verify required parameter 'patch' is not null or undefined
            if (patch === null || patch === undefined) {
                throw new RequiredError('patch','Required parameter patch was null or undefined when calling patchProduct2.');
            }
            const localVarPath = `/products2/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof patch !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(patch !== undefined ? patch : {}) : (patch || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the product1 with the given ID.
         * @summary Put product1
         * @param {number} id 
         * @param {Product1} resource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putProduct1: async (id: number, resource: Product1, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling putProduct1.');
            }
            // verify required parameter 'resource' is not null or undefined
            if (resource === null || resource === undefined) {
                throw new RequiredError('resource','Required parameter resource was null or undefined when calling putProduct1.');
            }
            const localVarPath = `/products1/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof resource !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(resource !== undefined ? resource : {}) : (resource || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the product2 with the given ID.
         * @summary Put product2
         * @param {number} id 
         * @param {Product2} resource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putProduct2: async (id: number, resource: Product2, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling putProduct2.');
            }
            // verify required parameter 'resource' is not null or undefined
            if (resource === null || resource === undefined) {
                throw new RequiredError('resource','Required parameter resource was null or undefined when calling putProduct2.');
            }
            const localVarPath = `/products2/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof resource !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(resource !== undefined ? resource : {}) : (resource || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates a product1.
         * @summary Create product1
         * @param {Product1} resource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProduct1(resource: Product1, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product1>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createProduct1(resource, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a product2.
         * @summary Create product2
         * @param {Product2} resource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProduct2(resource: Product2, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product2>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createProduct2(resource, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes the product1 with the given ID.
         * @summary Delete product1
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProduct1(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteProduct1(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes the product2 with the given ID.
         * @summary Delete product2
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProduct2(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteProduct2(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the product1 with the given ID.
         * @summary Get product1 by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProduct1(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product1>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getProduct1(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns all product1 resources.
         * @summary Get product1s
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProduct1s(limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Product1>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getProduct1s(limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the product1 resources with the given IDs.
         * @summary Get product1s by ID
         * @param {Array<number>} [ids] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProduct1sByID(ids?: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Product1>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getProduct1sByID(ids, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the product2 with the given ID.
         * @summary Get product2 by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProduct2(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product2>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getProduct2(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns all product2 resources.
         * @summary Get product2s
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProduct2s(limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Product2>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getProduct2s(limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the product2 resources with the given IDs.
         * @summary Get product2s by ID
         * @param {Array<number>} [ids] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProduct2sByID(ids?: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Product2>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getProduct2sByID(ids, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns 200 if the service is healthy.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthCheck(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).healthCheck(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Patches the product1 with the given ID.
         * @summary Patch product1
         * @param {number} id 
         * @param {Array<object>} patch 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchProduct1(id: number, patch: Array<object>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product1>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).patchProduct1(id, patch, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Patches the product2 with the given ID.
         * @summary Patch product2
         * @param {number} id 
         * @param {Array<object>} patch 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchProduct2(id: number, patch: Array<object>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product2>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).patchProduct2(id, patch, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Replaces the product1 with the given ID.
         * @summary Put product1
         * @param {number} id 
         * @param {Product1} resource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putProduct1(id: number, resource: Product1, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putProduct1(id, resource, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Replaces the product2 with the given ID.
         * @summary Put product2
         * @param {number} id 
         * @param {Product2} resource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putProduct2(id: number, resource: Product2, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putProduct2(id, resource, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Creates a product1.
         * @summary Create product1
         * @param {Product1} resource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProduct1(resource: Product1, options?: any): AxiosPromise<Product1> {
            return DefaultApiFp(configuration).createProduct1(resource, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a product2.
         * @summary Create product2
         * @param {Product2} resource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProduct2(resource: Product2, options?: any): AxiosPromise<Product2> {
            return DefaultApiFp(configuration).createProduct2(resource, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes the product1 with the given ID.
         * @summary Delete product1
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProduct1(id: number, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteProduct1(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes the product2 with the given ID.
         * @summary Delete product2
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProduct2(id: number, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteProduct2(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the product1 with the given ID.
         * @summary Get product1 by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProduct1(id: number, options?: any): AxiosPromise<Product1> {
            return DefaultApiFp(configuration).getProduct1(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all product1 resources.
         * @summary Get product1s
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProduct1s(limit?: number, offset?: number, options?: any): AxiosPromise<Array<Product1>> {
            return DefaultApiFp(configuration).getProduct1s(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the product1 resources with the given IDs.
         * @summary Get product1s by ID
         * @param {Array<number>} [ids] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProduct1sByID(ids?: Array<number>, options?: any): AxiosPromise<Array<Product1>> {
            return DefaultApiFp(configuration).getProduct1sByID(ids, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the product2 with the given ID.
         * @summary Get product2 by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProduct2(id: number, options?: any): AxiosPromise<Product2> {
            return DefaultApiFp(configuration).getProduct2(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all product2 resources.
         * @summary Get product2s
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProduct2s(limit?: number, offset?: number, options?: any): AxiosPromise<Array<Product2>> {
            return DefaultApiFp(configuration).getProduct2s(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the product2 resources with the given IDs.
         * @summary Get product2s by ID
         * @param {Array<number>} [ids] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProduct2sByID(ids?: Array<number>, options?: any): AxiosPromise<Array<Product2>> {
            return DefaultApiFp(configuration).getProduct2sByID(ids, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns 200 if the service is healthy.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheck(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).healthCheck(options).then((request) => request(axios, basePath));
        },
        /**
         * Patches the product1 with the given ID.
         * @summary Patch product1
         * @param {number} id 
         * @param {Array<object>} patch 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchProduct1(id: number, patch: Array<object>, options?: any): AxiosPromise<Product1> {
            return DefaultApiFp(configuration).patchProduct1(id, patch, options).then((request) => request(axios, basePath));
        },
        /**
         * Patches the product2 with the given ID.
         * @summary Patch product2
         * @param {number} id 
         * @param {Array<object>} patch 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchProduct2(id: number, patch: Array<object>, options?: any): AxiosPromise<Product2> {
            return DefaultApiFp(configuration).patchProduct2(id, patch, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the product1 with the given ID.
         * @summary Put product1
         * @param {number} id 
         * @param {Product1} resource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putProduct1(id: number, resource: Product1, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).putProduct1(id, resource, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the product2 with the given ID.
         * @summary Put product2
         * @param {number} id 
         * @param {Product2} resource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putProduct2(id: number, resource: Product2, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).putProduct2(id, resource, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Creates a product1.
     * @summary Create product1
     * @param {Product1} resource 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createProduct1(resource: Product1, options?: any) {
        return DefaultApiFp(this.configuration).createProduct1(resource, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a product2.
     * @summary Create product2
     * @param {Product2} resource 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createProduct2(resource: Product2, options?: any) {
        return DefaultApiFp(this.configuration).createProduct2(resource, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes the product1 with the given ID.
     * @summary Delete product1
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteProduct1(id: number, options?: any) {
        return DefaultApiFp(this.configuration).deleteProduct1(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes the product2 with the given ID.
     * @summary Delete product2
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteProduct2(id: number, options?: any) {
        return DefaultApiFp(this.configuration).deleteProduct2(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the product1 with the given ID.
     * @summary Get product1 by ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getProduct1(id: number, options?: any) {
        return DefaultApiFp(this.configuration).getProduct1(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all product1 resources.
     * @summary Get product1s
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getProduct1s(limit?: number, offset?: number, options?: any) {
        return DefaultApiFp(this.configuration).getProduct1s(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the product1 resources with the given IDs.
     * @summary Get product1s by ID
     * @param {Array<number>} [ids] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getProduct1sByID(ids?: Array<number>, options?: any) {
        return DefaultApiFp(this.configuration).getProduct1sByID(ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the product2 with the given ID.
     * @summary Get product2 by ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getProduct2(id: number, options?: any) {
        return DefaultApiFp(this.configuration).getProduct2(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all product2 resources.
     * @summary Get product2s
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getProduct2s(limit?: number, offset?: number, options?: any) {
        return DefaultApiFp(this.configuration).getProduct2s(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the product2 resources with the given IDs.
     * @summary Get product2s by ID
     * @param {Array<number>} [ids] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getProduct2sByID(ids?: Array<number>, options?: any) {
        return DefaultApiFp(this.configuration).getProduct2sByID(ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns 200 if the service is healthy.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public healthCheck(options?: any) {
        return DefaultApiFp(this.configuration).healthCheck(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Patches the product1 with the given ID.
     * @summary Patch product1
     * @param {number} id 
     * @param {Array<object>} patch 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public patchProduct1(id: number, patch: Array<object>, options?: any) {
        return DefaultApiFp(this.configuration).patchProduct1(id, patch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Patches the product2 with the given ID.
     * @summary Patch product2
     * @param {number} id 
     * @param {Array<object>} patch 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public patchProduct2(id: number, patch: Array<object>, options?: any) {
        return DefaultApiFp(this.configuration).patchProduct2(id, patch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the product1 with the given ID.
     * @summary Put product1
     * @param {number} id 
     * @param {Product1} resource 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putProduct1(id: number, resource: Product1, options?: any) {
        return DefaultApiFp(this.configuration).putProduct1(id, resource, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the product2 with the given ID.
     * @summary Put product2
     * @param {number} id 
     * @param {Product2} resource 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putProduct2(id: number, resource: Product2, options?: any) {
        return DefaultApiFp(this.configuration).putProduct2(id, resource, options).then((request) => request(this.axios, this.basePath));
    }

}


