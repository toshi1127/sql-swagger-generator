/*
 * TestService
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
)

// Product2 struct for Product2
type Product2 struct {
	Id *int64 `json:"id,omitempty"`
	Name string `json:"name"`
	Price int64 `json:"price"`
}

// NewProduct2 instantiates a new Product2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProduct2(name string, price int64, ) *Product2 {
	this := Product2{}
	this.Name = name
	this.Price = price
	return &this
}

// NewProduct2WithDefaults instantiates a new Product2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProduct2WithDefaults() *Product2 {
	this := Product2{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Product2) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Product2) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Product2) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *Product2) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *Product2) GetName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Product2) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Product2) SetName(v string) {
	o.Name = v
}

// GetPrice returns the Price field value
func (o *Product2) GetPrice() int64 {
	if o == nil  {
		var ret int64
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *Product2) GetPriceOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *Product2) SetPrice(v int64) {
	o.Price = v
}

func (o Product2) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["price"] = o.Price
	}
	return json.Marshal(toSerialize)
}

type NullableProduct2 struct {
	value *Product2
	isSet bool
}

func (v NullableProduct2) Get() *Product2 {
	return v.value
}

func (v *NullableProduct2) Set(val *Product2) {
	v.value = val
	v.isSet = true
}

func (v NullableProduct2) IsSet() bool {
	return v.isSet
}

func (v *NullableProduct2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProduct2(val *Product2) *NullableProduct2 {
	return &NullableProduct2{value: val, isSet: true}
}

func (v NullableProduct2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProduct2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
